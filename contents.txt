File: codebuild.tf
resource "aws_codebuild_project" "demo_app_1" {
  name         = "demo-app-1-build"
  service_role = aws_iam_role.codebuild_service_role.arn
  source {
    type      = "GITHUB"
    location  = "https://github.com/benbenbuhben/aws-demo-app-1.git"
    buildspec = "buildspec.yml"
  }
  artifacts {
    type = "NO_ARTIFACTS"
  }
  environment {
    compute_type    = "BUILD_GENERAL1_SMALL"
    image           = "aws/codebuild/standard:4.0"
    type            = "LINUX_CONTAINER"
    privileged_mode = true
    environment_variable {
      name  = "REPOSITORY_URI"
      value = aws_ecr_repository.demo_app.repository_url
    }
  }
}

resource "aws_codebuild_project" "demo_app_2" {
  name         = "demo-app-2-build"
  service_role = aws_iam_role.codebuild_service_role.arn
  source {
    type      = "GITHUB"
    location  = "https://github.com/benbenbuhben/aws-demo-app-2.git"
    buildspec = "buildspec.yml"
  }
  artifacts {
    type = "NO_ARTIFACTS"
  }
  environment {
    compute_type    = "BUILD_GENERAL1_SMALL"
    image           = "aws/codebuild/standard:4.0"
    type            = "LINUX_CONTAINER"
    privileged_mode = true
    environment_variable {
      name  = "REPOSITORY_URI"
      value = aws_ecr_repository.demo_app.repository_url
    }
  }
}

File: codepipeline.tf
resource "aws_codepipeline" "demo_app_1_pipeline" {
  name     = "demo-app-1-pipeline"
  role_arn = aws_iam_role.codepipeline_service_role.arn

  artifact_store {
    location = aws_s3_bucket.ihme_codepipeline_bucket.bucket
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        Owner      = "benbenbuhben"
        Repo       = "aws-demo-app-1"
        Branch     = "main"
        OAuthToken = var.github_token
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      output_artifacts = ["build_output"]
      version          = "1"

      configuration = {
        ProjectName = aws_codebuild_project.demo_app_1.name
      }
    }
  }
}

resource "aws_codepipeline" "demo_app_2_pipeline" {
  name     = "demo-app-2-pipeline"
  role_arn = aws_iam_role.codepipeline_service_role.arn

  artifact_store {
    location = aws_s3_bucket.ihme_codepipeline_bucket.bucket
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        Owner      = "benbenbuhben"
        Repo       = "aws-demo-app-2"
        Branch     = "main"
        OAuthToken = var.github_token
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      output_artifacts = ["build_output"]
      version          = "1"

      configuration = {
        ProjectName = aws_codebuild_project.demo_app_2.name
      }
    }
  }
}

File: ecr.tf
resource "aws_ecr_repository" "demo_app" {
  name = "demo-app"
}

File: eks.tf
# EKS Cluster Configuration
resource "aws_eks_cluster" "eks_cluster" {
  name     = "ihme-demo-cluster"
  role_arn = aws_iam_role.eks_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]
  }
}

resource "aws_eks_node_group" "eks_node_group" {
  cluster_name    = aws_eks_cluster.eks_cluster.name
  node_group_name = "ihme-demo-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]

  scaling_config {
    desired_size = 2
    max_size     = 2
    min_size     = 1
  }
}

resource "aws_iam_role" "eks_role" {
  name = "eks_cluster_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = aws_iam_role.eks_role.name
}

resource "aws_iam_role" "eks_node_role" {
  name = "eks_node_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_role.name
}

File: iam.tf
resource "aws_iam_role" "codebuild_service_role" {
  name = "codebuild_service_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "codebuild.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      },
      {
        Effect = "Allow",
        Principal = {
          AWS = "arn:aws:iam::992382508838:role/codebuild_service_role"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Attach the AmazonEC2ContainerRegistryPowerUser policy to the CodeBuild role
resource "aws_iam_role_policy_attachment" "codebuild_attach" {
  role       = aws_iam_role.codebuild_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
}

# Define the IAM role for CodePipeline
resource "aws_iam_role" "codepipeline_service_role" {
  name = "codepipeline_service_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "codepipeline.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Define policy for CloudWatch Logs permissions for CodeBuild
resource "aws_iam_role_policy" "codebuild_logs_policy" {
  name = "codebuild_logs_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

# Attach full access policies for CodePipeline
resource "aws_iam_role_policy_attachment" "codepipeline_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess"
}

# Attach S3 full access policy to the CodePipeline role
resource "aws_iam_role_policy_attachment" "codepipeline_s3_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# Attach CodeBuild developer access policy to the CodePipeline role
resource "aws_iam_role_policy_attachment" "codepipeline_codebuild_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
}

# Define policy for S3 access permissions for CodeBuild
resource "aws_iam_role_policy" "codebuild_s3_policy" {
  name = "codebuild_s3_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        Resource = [
          "arn:aws:s3:::ihme-codepipeline-artifacts-bucket/*"
        ]
      }
    ]
  })
}

# Define policy for EKS DescribeCluster permission for CodeBuild
resource "aws_iam_role_policy" "codebuild_eks_policy" {
  name = "codebuild_eks_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "eks:DescribeCluster"
        ],
        Resource = "arn:aws:eks:us-east-1:992382508838:cluster/ihme-demo-cluster"
      }
    ]
  })
}

# Define policy for SSM Parameter Store access for CodeBuild
resource "aws_iam_role_policy" "codebuild_ssm_policy" {
  name = "codebuild_ssm_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ],
        Resource = "arn:aws:ssm:us-east-1:992382508838:parameter/ihme-demo-app/*"
      }
    ]
  })
}

resource "aws_iam_role_policy" "codebuild_eks_permissions" {
  name = "codebuild_eks_permissions"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "eks:DescribeCluster",
          "eks:ListClusters",
          "eks:DescribeNodegroup",
          "eks:ListNodegroups",
          "eks:DescribeFargateProfile",
          "eks:ListFargateProfiles"
        ],
        "Resource" : "*"
      },
      {
        "Effect" : "Allow",
        "Action" : [
          "sts:AssumeRole"
        ],
        "Resource" : "arn:aws:iam::992382508838:role/codebuild_service_role"
      }
    ]
    }
  )
}

resource "aws_iam_role_policy" "codebuild_assume_role_policy" {
  name = "codebuild_assume_role_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = "sts:AssumeRole",
        Resource = "arn:aws:iam::992382508838:role/codebuild_service_role"
      }
    ]
  })
}

File: nginx_ingress.tf
resource "kubernetes_namespace" "ingress_nginx" {
  metadata {
    name = "ingress-nginx"
  }
}

resource "kubernetes_deployment" "nginx_ingress_controller" {
  metadata {
    name      = "ingress-nginx-controller"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
    labels = {
      app = "ingress-nginx"
    }
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "ingress-nginx"
      }
    }

    template {
      metadata {
        labels = {
          app = "ingress-nginx"
        }
      }

      spec {
        service_account_name = kubernetes_service_account.nginx_ingress_serviceaccount.metadata[0].name
        container {
          name  = "controller"
          image = "k8s.gcr.io/ingress-nginx/controller:v1.10.0"

          args = [
            "/nginx-ingress-controller",
            "--configmap=$(POD_NAMESPACE)/nginx-configuration",
            "--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services",
            "--udp-services-configmap=$(POD_NAMESPACE)/udp-services",
            "--annotations-prefix=nginx.ingress.kubernetes.io"
          ]

          port {
            name           = "http"
            container_port = 80
          }

          port {
            name           = "https"
            container_port = 443
          }

          env {
            name = "POD_NAME"
            value_from {
              field_ref {
                field_path = "metadata.name"
              }
            }
          }

          env {
            name = "POD_NAMESPACE"
            value_from {
              field_ref {
                field_path = "metadata.namespace"
              }
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "nginx_ingress" {
  metadata {
    name      = "ingress-nginx-controller"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }

  spec {
    type = "LoadBalancer"

    selector = {
      app = "ingress-nginx"
    }

    port {
      name        = "http"
      port        = 80
      target_port = 80
    }

    port {
      name        = "https"
      port        = 443
      target_port = 443
    }
  }
}

resource "kubernetes_cluster_role" "nginx_ingress_role" {
  metadata {
    name = "nginx-ingress-role"
  }

  rule {
    api_groups = [""]
    resources  = ["services", "endpoints", "configmaps", "secrets", "pods"]
    verbs      = ["get", "list", "watch"]
  }
  rule {
    api_groups = ["networking.k8s.io"]
    resources  = ["ingresses", "ingresses/status"]
    verbs      = ["get", "list", "watch", "update"]
  }
  rule {
    api_groups = ["coordination.k8s.io"]
    resources  = ["leases"]
    verbs      = ["get", "list", "watch", "create", "update"]
  }
  rule {
    api_groups = ["discovery.k8s.io"]
    resources  = ["endpointslices"]
    verbs      = ["get", "list", "watch"]
  }
}


resource "kubernetes_service_account" "nginx_ingress_serviceaccount" {
  metadata {
    name      = "nginx-ingress-serviceaccount"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }
}

resource "kubernetes_cluster_role_binding" "nginx_ingress_role_binding" {
  metadata {
    name = "nginx-ingress-role-binding"
  }

  subject {
    kind      = "ServiceAccount"
    name      = kubernetes_service_account.nginx_ingress_serviceaccount.metadata[0].name
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }

  role_ref {
    kind      = "ClusterRole"
    name      = kubernetes_cluster_role.nginx_ingress_role.metadata[0].name
    api_group = "rbac.authorization.k8s.io"
  }
}

File: provider.tf
provider "aws" {
  region = "us-east-1"
}

provider "kubernetes" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.cluster.token
}

data "aws_eks_cluster" "cluster" {
  name = "ihme-demo-cluster"
}

data "aws_eks_cluster_auth" "cluster" {
  name = "ihme-demo-cluster"
}

File: rds.tf
# RDS MySQL Instance Configuration

# Security group for RDS
resource "aws_security_group" "rds_sg" {
  name_prefix = "rds_sg"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# RDS Subnet Group
resource "aws_db_subnet_group" "main" {
  name       = "main-subnet-group"
  subnet_ids = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]
}

# RDS MySQL Instance
resource "aws_db_instance" "main" {
  allocated_storage      = 20
  engine                 = "mysql"
  engine_version         = "8.0"
  instance_class         = "db.t3.micro"
  db_name                = "mydatabase"
  username               = "admin"
  password               = "adminpassword"
  parameter_group_name   = "default.mysql8.0"
  skip_final_snapshot    = true
  db_subnet_group_name   = aws_db_subnet_group.main.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  publicly_accessible    = true
}

output "rds_endpoint" {
  value = aws_db_instance.main.endpoint
}

File: s3.tf
resource "aws_s3_bucket" "ihme_codepipeline_bucket" {
  bucket = "ihme-codepipeline-artifacts-bucket"
}

File: variables.tf
variable "github_token" {
  description = "OAuth token for GitHub"
  type        = string
  sensitive   = true
}

File: vpc.tf
# Create a VPC
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

# Create subnets in two different availability zones
resource "aws_subnet" "main_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "main_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
}

# Create an internet gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
}

# Create a route table
resource "aws_route_table" "main" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
}

# Associate the route table with the subnets
resource "aws_route_table_association" "main_subnet_1" {
  subnet_id      = aws_subnet.main_subnet_1.id
  route_table_id = aws_route_table.main.id
}

resource "aws_route_table_association" "main_subnet_2" {
  subnet_id      = aws_subnet.main_subnet_2.id
  route_table_id = aws_route_table.main.id
}

File: parameters.tf
resource "aws_ssm_parameter" "db_host" {
  name  = "/ihme-demo-app/DB_HOST"
  type  = "SecureString"
  value = "terraform-2024060315374721920000000c.c5keeiqmszay.us-east-1.rds.amazonaws.com"
}

resource "aws_ssm_parameter" "db_user" {
  name  = "/ihme-demo-app/DB_USER"
  type  = "SecureString"
  value = "admin"
}

resource "aws_ssm_parameter" "db_password" {
  name  = "/ihme-demo-app/DB_PASSWORD"
  type  = "SecureString"
  value = "adminpassword"
}

resource "aws_ssm_parameter" "db_name" {
  name  = "/ihme-demo-app/DB_NAME"
  type  = "SecureString"
  value = "mydatabase"
}

resource "aws_ssm_parameter" "docker_username" {
  name  = "/ihme-demo-app/DOCKER_USERNAME"
  type  = "SecureString"
  value = "bhurst8@gmail.com"
}

resource "aws_ssm_parameter" "docker_password" {
  name  = "/ihme-demo-app/DOCKER_PASSWORD"
  type  = "SecureString"
  value = "LobsterHub1!"
}

File: aws-auth-config.tf
resource "kubernetes_config_map" "aws_auth" {
  metadata {
    name      = "aws-auth"
    namespace = "kube-system"
  }

  data = {
    mapRoles = yamlencode([
      {
        rolearn  = "arn:aws:iam::992382508838:role/eks_node_role"
        username = "system:node:{{EC2PrivateDNSName}}"
        groups   = ["system:bootstrappers", "system:nodes"]
      },
      {
        rolearn  = "arn:aws:iam::992382508838:role/codebuild_service_role"
        username = "build"
        groups   = ["system:masters"]
      }
    ])
  }
}

File: codebuild.tf
resource "aws_codebuild_project" "demo_app_1" {
  name         = "demo-app-1-build"
  service_role = aws_iam_role.codebuild_service_role.arn
  source {
    type      = "GITHUB"
    location  = "https://github.com/benbenbuhben/aws-demo-app-1.git"
    buildspec = "buildspec.yml"
  }
  artifacts {
    type = "NO_ARTIFACTS"
  }
  environment {
    compute_type    = "BUILD_GENERAL1_SMALL"
    image           = "aws/codebuild/standard:4.0"
    type            = "LINUX_CONTAINER"
    privileged_mode = true
    environment_variable {
      name  = "REPOSITORY_URI"
      value = aws_ecr_repository.demo_app.repository_url
    }
  }
}

resource "aws_codebuild_project" "demo_app_2" {
  name         = "demo-app-2-build"
  service_role = aws_iam_role.codebuild_service_role.arn
  source {
    type      = "GITHUB"
    location  = "https://github.com/benbenbuhben/aws-demo-app-2.git"
    buildspec = "buildspec.yml"
  }
  artifacts {
    type = "NO_ARTIFACTS"
  }
  environment {
    compute_type    = "BUILD_GENERAL1_SMALL"
    image           = "aws/codebuild/standard:4.0"
    type            = "LINUX_CONTAINER"
    privileged_mode = true
    environment_variable {
      name  = "REPOSITORY_URI"
      value = aws_ecr_repository.demo_app.repository_url
    }
  }
}

File: codepipeline.tf
resource "aws_codepipeline" "demo_app_1_pipeline" {
  name     = "demo-app-1-pipeline"
  role_arn = aws_iam_role.codepipeline_service_role.arn

  artifact_store {
    location = aws_s3_bucket.ihme_codepipeline_bucket.bucket
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        Owner      = "benbenbuhben"
        Repo       = "aws-demo-app-1"
        Branch     = "main"
        OAuthToken = var.github_token
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      output_artifacts = ["build_output"]
      version          = "1"

      configuration = {
        ProjectName = aws_codebuild_project.demo_app_1.name
      }
    }
  }
}

resource "aws_codepipeline" "demo_app_2_pipeline" {
  name     = "demo-app-2-pipeline"
  role_arn = aws_iam_role.codepipeline_service_role.arn

  artifact_store {
    location = aws_s3_bucket.ihme_codepipeline_bucket.bucket
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "ThirdParty"
      provider         = "GitHub"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        Owner      = "benbenbuhben"
        Repo       = "aws-demo-app-2"
        Branch     = "main"
        OAuthToken = var.github_token
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      output_artifacts = ["build_output"]
      version          = "1"

      configuration = {
        ProjectName = aws_codebuild_project.demo_app_2.name
      }
    }
  }
}

File: ecr.tf
resource "aws_ecr_repository" "demo_app" {
  name = "demo-app"
}

File: eks.tf
# EKS Cluster Configuration
resource "aws_eks_cluster" "eks_cluster" {
  name     = "ihme-demo-cluster"
  role_arn = aws_iam_role.eks_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]
  }
}

resource "aws_eks_node_group" "eks_node_group" {
  cluster_name    = aws_eks_cluster.eks_cluster.name
  node_group_name = "ihme-demo-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]

  scaling_config {
    desired_size = 2
    max_size     = 2
    min_size     = 1
  }
}

resource "aws_iam_role" "eks_role" {
  name = "eks_cluster_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = aws_iam_role.eks_role.name
}

resource "aws_iam_role" "eks_node_role" {
  name = "eks_node_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_role.name
}

File: iam.tf
resource "aws_iam_role" "codebuild_service_role" {
  name = "codebuild_service_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "codebuild.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      },
      {
        Effect = "Allow",
        Principal = {
          AWS = "arn:aws:iam::992382508838:role/codebuild_service_role"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Attach the AmazonEC2ContainerRegistryPowerUser policy to the CodeBuild role
resource "aws_iam_role_policy_attachment" "codebuild_attach" {
  role       = aws_iam_role.codebuild_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
}

# Define the IAM role for CodePipeline
resource "aws_iam_role" "codepipeline_service_role" {
  name = "codepipeline_service_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "codepipeline.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Define policy for CloudWatch Logs permissions for CodeBuild
resource "aws_iam_role_policy" "codebuild_logs_policy" {
  name = "codebuild_logs_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

# Attach full access policies for CodePipeline
resource "aws_iam_role_policy_attachment" "codepipeline_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess"
}

# Attach S3 full access policy to the CodePipeline role
resource "aws_iam_role_policy_attachment" "codepipeline_s3_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# Attach CodeBuild developer access policy to the CodePipeline role
resource "aws_iam_role_policy_attachment" "codepipeline_codebuild_attach" {
  role       = aws_iam_role.codepipeline_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
}

# Define policy for S3 access permissions for CodeBuild
resource "aws_iam_role_policy" "codebuild_s3_policy" {
  name = "codebuild_s3_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        Resource = [
          "arn:aws:s3:::ihme-codepipeline-artifacts-bucket/*"
        ]
      }
    ]
  })
}

# Define policy for EKS DescribeCluster permission for CodeBuild
resource "aws_iam_role_policy" "codebuild_eks_policy" {
  name = "codebuild_eks_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "eks:DescribeCluster"
        ],
        Resource = "arn:aws:eks:us-east-1:992382508838:cluster/ihme-demo-cluster"
      }
    ]
  })
}

# Define policy for SSM Parameter Store access for CodeBuild
resource "aws_iam_role_policy" "codebuild_ssm_policy" {
  name = "codebuild_ssm_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ],
        Resource = "arn:aws:ssm:us-east-1:992382508838:parameter/ihme-demo-app/*"
      }
    ]
  })
}

resource "aws_iam_role_policy" "codebuild_eks_permissions" {
  name = "codebuild_eks_permissions"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "eks:DescribeCluster",
          "eks:ListClusters",
          "eks:DescribeNodegroup",
          "eks:ListNodegroups",
          "eks:DescribeFargateProfile",
          "eks:ListFargateProfiles"
        ],
        "Resource" : "*"
      },
      {
        "Effect" : "Allow",
        "Action" : [
          "sts:AssumeRole"
        ],
        "Resource" : "arn:aws:iam::992382508838:role/codebuild_service_role"
      }
    ]
    }
  )
}

resource "aws_iam_role_policy" "codebuild_assume_role_policy" {
  name = "codebuild_assume_role_policy"
  role = aws_iam_role.codebuild_service_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = "sts:AssumeRole",
        Resource = "arn:aws:iam::992382508838:role/codebuild_service_role"
      }
    ]
  })
}

File: nginx_ingress.tf
resource "kubernetes_namespace" "ingress_nginx" {
  metadata {
    name = "ingress-nginx"
  }
}

resource "kubernetes_deployment" "nginx_ingress_controller" {
  metadata {
    name      = "ingress-nginx-controller"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
    labels = {
      app = "ingress-nginx"
    }
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "ingress-nginx"
      }
    }

    template {
      metadata {
        labels = {
          app = "ingress-nginx"
        }
      }

      spec {
        service_account_name = kubernetes_service_account.nginx_ingress_serviceaccount.metadata[0].name
        container {
          name  = "controller"
          image = "k8s.gcr.io/ingress-nginx/controller:v1.10.0"

          args = [
            "/nginx-ingress-controller",
            "--configmap=$(POD_NAMESPACE)/nginx-configuration",
            "--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services",
            "--udp-services-configmap=$(POD_NAMESPACE)/udp-services",
            "--annotations-prefix=nginx.ingress.kubernetes.io"
          ]

          port {
            name           = "http"
            container_port = 80
          }

          port {
            name           = "https"
            container_port = 443
          }

          env {
            name = "POD_NAME"
            value_from {
              field_ref {
                field_path = "metadata.name"
              }
            }
          }

          env {
            name = "POD_NAMESPACE"
            value_from {
              field_ref {
                field_path = "metadata.namespace"
              }
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "nginx_ingress" {
  metadata {
    name      = "ingress-nginx-controller"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }

  spec {
    type = "LoadBalancer"

    selector = {
      app = "ingress-nginx"
    }

    port {
      name        = "http"
      port        = 80
      target_port = 80
    }

    port {
      name        = "https"
      port        = 443
      target_port = 443
    }
  }
}

resource "kubernetes_cluster_role" "nginx_ingress_role" {
  metadata {
    name = "nginx-ingress-role"
  }

  rule {
    api_groups = [""]
    resources  = ["services", "endpoints", "configmaps", "secrets", "pods"]
    verbs      = ["get", "list", "watch"]
  }
  rule {
    api_groups = ["networking.k8s.io"]
    resources  = ["ingresses", "ingresses/status"]
    verbs      = ["get", "list", "watch", "update"]
  }
  rule {
    api_groups = ["coordination.k8s.io"]
    resources  = ["leases"]
    verbs      = ["get", "list", "watch", "create", "update"]
  }
  rule {
    api_groups = ["discovery.k8s.io"]
    resources  = ["endpointslices"]
    verbs      = ["get", "list", "watch"]
  }
}


resource "kubernetes_service_account" "nginx_ingress_serviceaccount" {
  metadata {
    name      = "nginx-ingress-serviceaccount"
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }
}

resource "kubernetes_cluster_role_binding" "nginx_ingress_role_binding" {
  metadata {
    name = "nginx-ingress-role-binding"
  }

  subject {
    kind      = "ServiceAccount"
    name      = kubernetes_service_account.nginx_ingress_serviceaccount.metadata[0].name
    namespace = kubernetes_namespace.ingress_nginx.metadata[0].name
  }

  role_ref {
    kind      = "ClusterRole"
    name      = kubernetes_cluster_role.nginx_ingress_role.metadata[0].name
    api_group = "rbac.authorization.k8s.io"
  }
}

File: provider.tf
provider "aws" {
  region = "us-east-1"
}

provider "kubernetes" {
  host                   = data.aws_eks_cluster.cluster.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.cluster.token
}

data "aws_eks_cluster" "cluster" {
  name = "ihme-demo-cluster"
}

data "aws_eks_cluster_auth" "cluster" {
  name = "ihme-demo-cluster"
}

File: rds.tf
# RDS MySQL Instance Configuration

# Security group for RDS
resource "aws_security_group" "rds_sg" {
  name_prefix = "rds_sg"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# RDS Subnet Group
resource "aws_db_subnet_group" "main" {
  name       = "main-subnet-group"
  subnet_ids = [aws_subnet.main_subnet_1.id, aws_subnet.main_subnet_2.id]
}

# RDS MySQL Instance
resource "aws_db_instance" "main" {
  allocated_storage      = 20
  engine                 = "mysql"
  engine_version         = "8.0"
  instance_class         = "db.t3.micro"
  db_name                = "mydatabase"
  username               = "admin"
  password               = "adminpassword"
  parameter_group_name   = "default.mysql8.0"
  skip_final_snapshot    = true
  db_subnet_group_name   = aws_db_subnet_group.main.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  publicly_accessible    = true
}

output "rds_endpoint" {
  value = aws_db_instance.main.endpoint
}

File: s3.tf
resource "aws_s3_bucket" "ihme_codepipeline_bucket" {
  bucket = "ihme-codepipeline-artifacts-bucket"
}

File: variables.tf
variable "github_token" {
  description = "OAuth token for GitHub"
  type        = string
  sensitive   = true
}

File: vpc.tf
# Create a VPC
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

# Create subnets in two different availability zones
resource "aws_subnet" "main_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "main_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
}

# Create an internet gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
}

# Create a route table
resource "aws_route_table" "main" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }
}

# Associate the route table with the subnets
resource "aws_route_table_association" "main_subnet_1" {
  subnet_id      = aws_subnet.main_subnet_1.id
  route_table_id = aws_route_table.main.id
}

resource "aws_route_table_association" "main_subnet_2" {
  subnet_id      = aws_subnet.main_subnet_2.id
  route_table_id = aws_route_table.main.id
}

File: parameters.tf
resource "aws_ssm_parameter" "db_host" {
  name  = "/ihme-demo-app/DB_HOST"
  type  = "SecureString"
  value = "terraform-2024060315374721920000000c.c5keeiqmszay.us-east-1.rds.amazonaws.com"
}

resource "aws_ssm_parameter" "db_user" {
  name  = "/ihme-demo-app/DB_USER"
  type  = "SecureString"
  value = "admin"
}

resource "aws_ssm_parameter" "db_password" {
  name  = "/ihme-demo-app/DB_PASSWORD"
  type  = "SecureString"
  value = "*****"
}

resource "aws_ssm_parameter" "db_name" {
  name  = "/ihme-demo-app/DB_NAME"
  type  = "SecureString"
  value = "mydatabase"
}

resource "aws_ssm_parameter" "docker_username" {
  name  = "/ihme-demo-app/DOCKER_USERNAME"
  type  = "SecureString"
  value = "bhurst8@gmail.com"
}

resource "aws_ssm_parameter" "docker_password" {
  name  = "/ihme-demo-app/DOCKER_PASSWORD"
  type  = "SecureString"
  value = "******"
}

File: aws-auth-config.tf
resource "kubernetes_config_map" "aws_auth" {
  metadata {
    name      = "aws-auth"
    namespace = "kube-system"
  }

  data = {
    mapRoles = yamlencode([
      {
        rolearn  = "arn:aws:iam::992382508838:role/eks_node_role"
        username = "system:node:{{EC2PrivateDNSName}}"
        groups   = ["system:bootstrappers", "system:nodes"]
      },
      {
        rolearn  = "arn:aws:iam::992382508838:role/codebuild_service_role"
        username = "build"
        groups   = ["system:masters"]
      }
    ])
  }
}

